// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (short_code, original_url, created_at, usage_count)
VALUES (?, ?, ?, 0)
RETURNING id, short_code, original_url, created_at, last_used_at, usage_count
`

type CreateURLParams struct {
	ShortCode   string    `json:"short_code"`
	OriginalUrl string    `json:"original_url"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.ShortCode, arg.OriginalUrl, arg.CreatedAt)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortCode,
		&i.OriginalUrl,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.UsageCount,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls 
WHERE short_code = ?
`

func (q *Queries) DeleteURL(ctx context.Context, shortCode string) error {
	_, err := q.db.ExecContext(ctx, deleteURL, shortCode)
	return err
}

const getAllURLs = `-- name: GetAllURLs :many
SELECT id, short_code, original_url, created_at, last_used_at, usage_count FROM urls
ORDER BY created_at DESC
`

func (q *Queries) GetAllURLs(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getAllURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortCode,
			&i.OriginalUrl,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.UsageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURL = `-- name: GetURL :one
SELECT id, short_code, original_url, created_at, last_used_at, usage_count FROM urls
WHERE short_code = ?
`

func (q *Queries) GetURL(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURL, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortCode,
		&i.OriginalUrl,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.UsageCount,
	)
	return i, err
}

const uRLExists = `-- name: URLExists :one
SELECT COUNT(*) FROM urls
WHERE short_code = ?
`

func (q *Queries) URLExists(ctx context.Context, shortCode string) (int64, error) {
	row := q.db.QueryRowContext(ctx, uRLExists, shortCode)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUsage = `-- name: UpdateUsage :exec
UPDATE urls 
SET usage_count = ?, last_used_at = ?
WHERE short_code = ?
`

type UpdateUsageParams struct {
	UsageCount sql.NullInt64 `json:"usage_count"`
	LastUsedAt sql.NullTime  `json:"last_used_at"`
	ShortCode  string        `json:"short_code"`
}

func (q *Queries) UpdateUsage(ctx context.Context, arg UpdateUsageParams) error {
	_, err := q.db.ExecContext(ctx, updateUsage, arg.UsageCount, arg.LastUsedAt, arg.ShortCode)
	return err
}
