// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: counters.sql

package sqlc

import (
	"context"
)

const getCounter = `-- name: GetCounter :one
SELECT value FROM counters WHERE key = ?
`

func (q *Queries) GetCounter(ctx context.Context, key string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCounter, key)
	var value int64
	err := row.Scan(&value)
	return value, err
}

const incrementCounter = `-- name: IncrementCounter :one
INSERT INTO counters (key, value, updated_at) VALUES (?, ?, CURRENT_TIMESTAMP)
ON CONFLICT(key) DO UPDATE SET 
    value = counters.value + ?,
    updated_at = CURRENT_TIMESTAMP
RETURNING value
`

type IncrementCounterParams struct {
	Key   string `json:"key"`
	Value int64  `json:"value"`
}

func (q *Queries) IncrementCounter(ctx context.Context, arg IncrementCounterParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, incrementCounter, arg.Key, arg.Value)
	var value int64
	err := row.Scan(&value)
	return value, err
}

const setCounter = `-- name: SetCounter :exec
INSERT OR REPLACE INTO counters (key, value, updated_at) VALUES (?, ?, CURRENT_TIMESTAMP)
`

type SetCounterParams struct {
	Key   string `json:"key"`
	Value int64  `json:"value"`
}

func (q *Queries) SetCounter(ctx context.Context, arg SetCounterParams) error {
	_, err := q.db.ExecContext(ctx, setCounter, arg.Key, arg.Value)
	return err
}
